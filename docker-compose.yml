version: '3.8'

services:
  # Python Microservice
  app:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M

  # PostgreSQL Database
  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
#    deploy:
#      resources:
#        limits:
#          cpus: '1.0'
#          memory: 1G
#        reservations:
#          cpus: '0.5'
#          memory: 512M

  # Redis Cache
  redis:
    image: redis:6.2-alpine
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
#    deploy:
#      resources:
#        limits:
#          cpus: '0.25'
#          memory: 256M
#        reservations:
#          cpus: '0.1'
#          memory: 128M

  # Apache Airflow Webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    command: webserver
    ports:
      - "8081:8080"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
#    deploy:
#      resources:
#        limits:
#          cpus: '0.75'
#          memory: 1G
#        reservations:
#          cpus: '0.5'
#          memory: 512M
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./great_expectations:/opt/airflow/great_expectations

  # Apache Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    command: scheduler
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 1G
#        reservations:
#          cpus: '0.25'
#          memory: 512M
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./great_expectations:/opt/airflow/great_expectations

  # Apache Airflow Worker
  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    command: celery worker
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 1G
#        reservations:
#          cpus: '0.25'
#          memory: 512M
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./great_expectations:/opt/airflow/great_expectations
      - ./data:/app/data

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.37.0
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          cpus: '0.5'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:8.5.2
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# Named volumes for data persistence
volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

# Shared network for all services
networks:
  app-network:
    driver: bridge